#! /usr/bin/env node
//    _____             .___     .__                  __         .__                  
//   /     \   ____   __| _/____ |  |__  _  _______ _/  |_  ____ |  |__   ___________ 
//  /  \ /  \ /  _ \ / __ |/ __ \|  |\ \/ \/ /\__  \\   __\/ ___\|  |  \_/ __ \_  __ \
// /    Y    (  <_> ) /_/ \  ___/|  |_\     /  / __ \|  | \  \___|   Y  \  ___/|  | \/
// \____|__  /\____/\____ |\___  >____/\/\_/  (____  /__|  \___  >___|  /\___  >__|   
//         \/            \/    \/                  \/          \/     \/     \/       
//
// Add a model we want to watch under modelwatcher.
//
const usage = 
`
MODELWATCHER WATCH
Automate render script execution on model results.

mwatch renderer path
`;

// Libraries
const fs = require('fs');
const {flock} = require('fs-ext');
const path = require('path');
const os = require('os');

// The watchfile is where we keep our observed models.
const mwDir = __dirname + '/../';

//------------------------------------------------------------------------------
// Helper functions.

/**
 * Lock the watchlist file.
 */
function lockWatchlist() {
    return new Promise((resolve, reject) => {
        flock(watchlistFD, 'ex', (err) => {
            if (err) {
                reject(`Failed to lock watchlist:' ${err}`);
            }

            resolve();
        });
    });
}

/**
 * Unlock the watchlist file.
 * @returns {Promise}
 */
function releaseWatchlist() {
    return new Promise((resolve, reject) => {
        flock(watchlistFD, 'un', (err) => {
            if (err) {
                reject(`Failed to unlock watchlist:' ${err}`);
            }
            resolve();
        });
    });
}

/**
 * Verify modelwatcher is running. Currently we just check the configuration files exist.
 */
function modelwatcherRunning() {
    return fs.existsSync(mwDir + 'watchlist.json') && fs.existsSync(mwDir + 'renderers.json');
}

/**
 * Verify command line input.
 * This function will exit the script if we have bad input.
 */
function commandLineInput() {

    // We need complete arguments.
    if (process.argv.slice(2)[0] === undefined) {
        console.log(usage);
        process.exit(1);
    }

    // Make sure we have a valid renderer.
    const renderer = process.argv.slice(2)[0];
    if (renderers[renderer] === undefined) {
        console.log('Renderer/postprocessor script not found.');
        console.log('scripts: ', Object.keys(renderers).join(', '));
        process.exit(1);
    }

    let modeldir = process.argv.slice(3)[0];
    if (modeldir === undefined) {
        console.log('Directory not defined.');
        process.exit(1);
    }

    // Check if the path exists.
    const absolutePath = path.resolve(modeldir);
    if (!fs.existsSync(absolutePath)) {
        console.log(`The model directory path doesn't exist: ${modeldir}`);
        process.exit(1);
    }

    return { script: renderer, dir: absolutePath, user:os.userInfo().username };
}

//------------------------------------------------------------------------------
// Gather input and verify state.

if (!modelwatcherRunning()) {
    console.log('Modelwatcher appears to not be running. Please contact support.');
    process.exit(1);
}

// Configuation.
const renderers = JSON.parse( fs.readFileSync(mwDir + 'renderers.json', 'utf8') );
let watchlist = JSON.parse(fs.readFileSync(mwDir + 'watchlist.json', 'utf8'));
const input = commandLineInput();

const watchlistFD = fs.openSync(mwDir + 'watchlist.json', 'w+');
lockWatchlist()
.then(() => {

    // Update the watch list.
    const id = Number(watchlist.count) + 1;
    watchlist.count = id;
    watchlist.watch[id] = {
        renderer: input.script,
        basedir: input.dir,
        who: input.user,
        repeat: true
    }
    fs.writeFileSync(watchlistFD, JSON.stringify(watchlist, null, 4));

    console.log('Now Watching');
    console.log(`id:${id} renderer:${input.script} for:${input.user} at:${input.dir}`);

    // Cleanup.
    releaseWatchlist()
    .then(() => {
        fs.closeSync(watchlistFD);
        process.exit(0);
    });
});